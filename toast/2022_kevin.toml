# TOAST config
# Generated with version 2.3.12.dev250

[operators]
[operators.sim_ground]
    class = "toast.ops.sim_ground.SimGround"
    API = 0 # Internal interface version for this operator
    azimuth = "azimuth" # Observation shared key for Azimuth
    boresight_azel = "boresight_azel" # Observation shared key for boresight AZ/EL
    boresight_radec = "boresight_radec" # Observation shared key for boresight RA/DEC
    det_data = "signal" # Observation detdata key to initialize
    det_flags = "flags" # Observation detdata key for flags to initialize
    detset_key = "pixel" # If specified, use this column of the focalplane detector_data to group detectors
    distribute_time = false # Distribute observation data along the time axis rather than detector axis
    el_mod_amplitude = "1.00000000000000e+00 deg" # Range of elevation modulation
    el_mod_rate = "0.00000000000000e+00 Hz" # Modulate elevation continuously at this rate
    el_mod_sine = false # Modulate elevation with a sine wave instead of a triangle wave
    el_mod_step = "0.00000000000000e+00 deg" # Amount to step elevation after each left-right scan pair
    elevation = "elevation" # Observation shared key for Elevation
    elnod_end = false # Perform an el-nod after the scan
    elnod_every_scan = false # Perform el nods every scan
    elnod_interval = "elnod" # Interval name for elnods
    elnod_mask = 7 # Bit mask to raise elevation nod flags with
    elnod_start = false # Perform an el-nod before the scan
    elnods = [] # List of relative el_nods
    enabled = false # If True, this class instance is marked as enabled
    hwp_angle = "hwp_angle" # Observation shared key for HWP angle
    hwp_rpm = 120 # The rate (in RPM) of the HWP rotation
    hwp_step = "None" # For stepped HWP, the angle of each step
    hwp_step_time = "None" # For stepped HWP, the time between steps
    invalid_mask = 1 # Bit mask to raise invalid flags with
    leftright_mask = 8 # Bit mask to raise left-to-right flags with
    max_pwv = "None" # Maximum PWV for the simulated weather.
    median_weather = true
    name = "sim_ground" # The 'name' of this class instance
    position = "position" # Observation shared key for position
    rightleft_mask = 16 # Bit mask to raise right-to-left flags with
    scan_accel_az = "1.00000000000000e+00 deg / s2" # Mount scanning rate acceleration for turnarounds
    scan_accel_el = "1.00000000000000e+00 deg / s2" # Mount elevation rate acceleration.
    scan_cosecant_modulation = false # Modulate the scan rate according to 1/sin(az) for uniform depth
    scan_leftright_interval = "scan_leftright" # Interval name for left to right scans
    scan_rate_az = "1.00000000000000e+00 deg / s" # The sky azimuth scanning rate
    scan_rate_el = "1.00000000000000e+00 deg / s" # The sky elevation scanning rate
    scan_rightleft_interval = "scan_rightleft" # Interval name for right to left scans
    scanning_interval = "scanning" # Interval name for scanning
    schedule = "None" # Instance of a GroundSchedule
    shared_flags = "flags" # Observation shared key for common flags
    sun_angle_min = "9.00000000000000e+01 deg" # Minimum angular distance for the scan and the Sun
    sun_close_distance = "4.50000000000000e+01 deg" # 'Sun close' flagging distance
    sun_close_interval = "sun_close" # Interval name for times when the sun is close
    sun_close_mask = 64 # Bit mask to raise Sun close flags with
    sun_up_interval = "sun_up" # Interval name for times when the sun is up
    sun_up_mask = 32 # Bit mask to raise Sun up flags with
    telescope = "None" # This must be an instance of a Telescope
    throw_interval = "throw" # Interval name for scan + turnaround intervals
    throw_leftright_interval = "throw_leftright" # Interval name for left to right scans + turnarounds
    throw_rightleft_interval = "throw_rightleft" # Interval name for right to left scans + turnarounds
    times = "times" # Observation shared key for timestamps
    timezone = 0 # The (integer) timezone offset in hours from UTC to apply to schedule
    turn_leftright_interval = "turn_leftright" # Interval name for turnarounds after left to right scans
    turn_rightleft_interval = "turn_rightleft" # Interval name for turnarounds after right to left scans
    turnaround_interval = "turnaround" # Interval name for turnarounds
    turnaround_mask = 3 # Bit mask to raise turnaround flags with
    velocity = "velocity" # Observation shared key for velocity
    weather = "atacama" # Name of built-in weather site (e.g. 'atacama', 'south_pole') or path to HDF5 file

[operators.corotate_lat]
    class = "sotodlib.toast.ops.corotator.CoRotator"
    API = 0 # Internal interface version for this operator
    boresight_azel = "boresight_azel" # Observation shared key for boresight Az/El
    boresight_radec = "boresight_radec" # Observation shared key for boresight RA/Dec
    corotate_lat = true # Rotate LAT receiver to maintain focalplane orientation
    corotator_angle = "corotator_angle" # Observation shared key for corotator_angle
    elevation = "elevation" # Observation shared key for boresight elevation
    enabled = false # If True, this class instance is marked as enabled
    name = "corotate_lat" # The 'name' of this class instance

[operators.default_model]
    class = "toast.ops.noise_model.DefaultNoiseModel"
    API = 0 # Internal interface version for this operator
    enabled = true # If True, this class instance is marked as enabled
    name = "default_model" # The 'name' of this class instance
    noise_model = "noise_model" # The observation key for storing the noise model

[operators.elevation_model]
    class = "toast.ops.elevation_noise.ElevationNoise"
    API = 0 # Internal interface version for this operator
    detector_pointing = "None" # Operator that translates boresight Az / El pointing into detector frame
    enabled = true # If True, this class instance is marked as enabled
    extra_factor = 1.58588 # Extra multiplier to the NET scaling
    modulate_pwv = false # If True, modulate the NET based on PWV
    name = "elevation_model" # The 'name' of this class instance
    noise_a = "None" # Parameter 'a' in (a / sin(el) + c).  If not set, look for one in the Focalplane.
    noise_c = "None" # Parameter 'c' in (a / sin(el) + c).  If not set, look for one in the Focalplane.
    noise_model = "noise_model" # The observation key containing the input noise model
    out_model = "noise_model" # Create a new noise model with this name
    pwv_a0 = "None" # Parameter 'a0' in (a0 + pwv * a1 + pwv ** 2 * a2).  If not set, look for one in the Focalplane.
    pwv_a1 = "None" # Parameter 'a1' in (a0 + pwv * a1 + pwv ** 2 * a2).  If not set, look for one in the Focalplane.
    pwv_a2 = "None" # Parameter 'a2' in (a0 + pwv * a1 + pwv ** 2 * a2).  If not set, look for one in the Focalplane.
    times = "times" # Observation shared key for timestamps
    view = "middle" # Use this view of the data in all observations

[operators.det_pointing_azel]
    class = "toast.ops.pointing_detector.PointingDetectorSimple"
    API = 0 # Internal interface version for this operator
    boresight = "boresight_radec" # Observation shared key for boresight
    coord_in = "None" # The input boresight coordinate system ('C', 'E', 'G')
    coord_out = "None" # The output coordinate system ('C', 'E', 'G')
    enabled = true # If True, this class instance is marked as enabled
    name = "det_pointing_azel" # The 'name' of this class instance
    quats = "quats_azel" # Observation detdata key for output quaternions
    shared_flag_mask = 1 # Bit mask value for optional flagging
    shared_flags = "flags" # Observation shared key for telescope flags to use
    view = "None" # Use this view of the data in all observations

[operators.weights_azel]
    class = "toast.ops.stokes_weights.StokesWeights"
    API = 0 # Internal interface version for this operator
    cal = "None" # The observation key with a dictionary of pointing weight calibration for each det
    detector_pointing = "None" # Operator that translates boresight pointing into detector frame
    enabled = true # If True, this class instance is marked as enabled
    hwp_angle = "hwp_angle" # Observation shared key for HWP angle
    mode = "IQU" # The Stokes weights to generate (I or IQU)
    name = "weights_azel" # The 'name' of this class instance
    quats = "None" # Observation detdata key for output quaternions
    single_precision = false # If True, use 32bit float in output
    view = "None" # Use this view of the data in all observations
    weights = "weights_azel" # Observation detdata key for output weights

[operators.det_pointing_radec]
    class = "toast.ops.pointing_detector.PointingDetectorSimple"
    API = 0 # Internal interface version for this operator
    boresight = "boresight_radec" # Observation shared key for boresight
    coord_in = "None" # The input boresight coordinate system ('C', 'E', 'G')
    coord_out = "None" # The output coordinate system ('C', 'E', 'G')
    enabled = true # If True, this class instance is marked as enabled
    name = "det_pointing_radec" # The 'name' of this class instance
    quats = "quats_radec" # Observation detdata key for output quaternions
    shared_flag_mask = 1 # Bit mask value for optional flagging
    shared_flags = "flags" # Observation shared key for telescope flags to use
    view = "None" # Use this view of the data in all observations

[operators.scan_map]
    class = "toast.ops.scan_healpix.ScanHealpixMap"
    API = 0 # Internal interface version for this operator
    det_data = "signal" # Observation detdata key for accumulating output
    enabled = true # If True, this class instance is marked as enabled
    file = "/global/cscratch1/sd/kwolz/BBPower/sims/nside512/SO_SAT_145_cmb_0000_CMB_r0_20201207.fits" # Path to healpix FITS file
    name = "scan_map" # The 'name' of this class instance
    pixel_dist = "pixel_dist" # The Data key where the PixelDistribution object is located
    pixel_pointing = "None" # This must be an instance of a pixel pointing operator
    save_map = true # If True, do not delete map during finalize
    save_pointing = false # If True, do not clear detector pointing matrices if we generate the pixel distribution
    stokes_weights = "None" # This must be an instance of a Stokes weights operator
    subtract = false # If True, subtract the map timestream instead of accumulating
    zero = false # If True, zero the data before accumulating / subtracting

[operators.sim_atmosphere_coarse]
    class = "toast.ops.sim_tod_atm.SimAtmosphere"
    API = 0 # Internal interface version for this operator
    add_loading = false # Add elevation-dependent loading.
    cache_dir = "atm_cache_coarse" # Directory to use for loading / saving atmosphere realizations
    cache_only = false # If True, only cache the atmosphere, do not observe it.
    component = 123456 # The component index to use for this atmosphere simulation
    debug_plots = false # If True, make plots of the debug snapshots
    debug_snapshots = false # If True, dump snapshots of the atmosphere slabs to pickle files
    debug_spectrum = false # If True, dump out Kolmogorov debug files
    debug_tod = false # If True, dump TOD to pickle files
    det_data = "signal" # Observation detdata key for accumulating atmosphere timestreams
    det_flag_mask = 1 # Bit mask value for optional detector flagging
    det_flags = "flags" # Observation detdata key for flags to use
    detector_pointing = "None" # Operator that translates boresight Az/El pointing into detector frame
    detector_weights = "None" # Operator that translates boresight Az/El pointing into detector weights
    enabled = true # If True, this class instance is marked as enabled
    fade_time = "6.00000000000000e+01 s" # Fade in/out time to avoid a step at wind break.
    field_of_view = "8 deg" # Override the focalplane field of view
    freq = "None" # Observing frequency
    gain = 0.0006 # Scaling applied to the simulated TOD
    lmax_center = "1.00000000000000e+04 m" # Kolmogorov turbulence injection scale center
    lmax_sigma = "1.00000000000000e+03 m" # Kolmogorov turbulence injection scale sigma
    lmin_center = "3.00000000000000e+02 m" # Kolmogorov turbulence dissipation scale center
    lmin_sigma = "3.00000000000000e+01 m" # Kolmogorov turbulence dissipation scale sigma
    n_bandpass_freqs = 100 # The number of sampling frequencies used when convolving the bandpass with atmosphere absorption and loading
    name = "sim_atmosphere_coarse" # The 'name' of this class instance
    nelem_sim_max = 30000 # Controls the size of the simulation slices
    overwrite_cache = false # If True, redo and overwrite any cached atmospheric realizations.
    polarization_fraction = 0.0 # Polarization fraction (only Q polarization).
    realization = 1000000 # If simulating multiple realizations, the realization index
    sample_rate = "None" # Rate at which to sample atmospheric TOD before interpolation.  Default is no interpolation.
    shared_flag_mask = 0 # Bit mask value for optional shared flagging
    shared_flags = "None" # Observation shared key for telescope flags to use
    times = "times" # Observation shared key for timestamps
    turnaround_interval = "turnaround" # Interval name for turnarounds
    view = "None" # Use this view of the data in all observations
    wind_dist = "1.00000000000000e+04 m" # Maximum wind drift before discarding the volume and creating a new one
    xstep = "5.00000000000000e+01 m" # Size of volume elements in X direction
    ystep = "5.00000000000000e+01 m" # Size of volume elements in Y direction
    z0_center = "2.00000000000000e+03 m" # Central value of the water vapor distribution
    z0_sigma = "0.00000000000000e+00 m" # Sigma of the water vapor distribution
    zatm = "4.00000000000000e+04 m" # Atmosphere extent for temperature profile
    zmax = "2.00000000000000e+03 m" # Atmosphere extent for water vapor integration
    zstep = "5.00000000000000e+01 m" # Size of volume elements in Z direction

[operators.sim_atmosphere]
    class = "toast.ops.sim_tod_atm.SimAtmosphere"
    API = 0 # Internal interface version for this operator
    add_loading = true # Add elevation-dependent loading.
    cache_dir = "atm_cache" # Directory to use for loading / saving atmosphere realizations
    cache_only = false # If True, only cache the atmosphere, do not observe it.
    component = 123456 # The component index to use for this atmosphere simulation
    debug_plots = false # If True, make plots of the debug snapshots
    debug_snapshots = false # If True, dump snapshots of the atmosphere slabs to pickle files
    debug_spectrum = false # If True, dump out Kolmogorov debug files
    debug_tod = false # If True, dump TOD to pickle files
    det_data = "signal" # Observation detdata key for accumulating atmosphere timestreams
    det_flag_mask = 1 # Bit mask value for optional detector flagging
    det_flags = "flags" # Observation detdata key for flags to use
    detector_pointing = "None" # Operator that translates boresight Az/El pointing into detector frame
    detector_weights = "None" # Operator that translates boresight Az/El pointing into detector weights
    enabled = true # If True, this class instance is marked as enabled
    fade_time = "6.00000000000000e+01 s" # Fade in/out time to avoid a step at wind break.
    field_of_view = "None" # Override the focalplane field of view
    freq = "None" # Observing frequency
    gain = 6e-05 # Scaling applied to the simulated TOD
    lmax_center = "1.00000000000000e+00 m" # Kolmogorov turbulence injection scale center
    lmax_sigma = "1.00000000000000e-01 m" # Kolmogorov turbulence injection scale sigma
    lmin_center = "1.00000000000000e-03 m" # Kolmogorov turbulence dissipation scale center
    lmin_sigma = "1.00000000000000e-04 m" # Kolmogorov turbulence dissipation scale sigma
    n_bandpass_freqs = 100 # The number of sampling frequencies used when convolving the bandpass with atmosphere absorption and loading
    name = "sim_atmosphere" # The 'name' of this class instance
    nelem_sim_max = 10000 # Controls the size of the simulation slices
    overwrite_cache = false # If True, redo and overwrite any cached atmospheric realizations.
    polarization_fraction = 0.0 # Polarization fraction (only Q polarization).
    realization = 0 # If simulating multiple realizations, the realization index
    sample_rate = "None" # Rate at which to sample atmospheric TOD before interpolation.  Default is no interpolation.
    shared_flag_mask = 0 # Bit mask value for optional shared flagging
    shared_flags = "None" # Observation shared key for telescope flags to use
    times = "times" # Observation shared key for timestamps
    turnaround_interval = "turnaround" # Interval name for turnarounds
    view = "None" # Use this view of the data in all observations
    wind_dist = "3.00000000000000e+03 m" # Maximum wind drift before discarding the volume and creating a new one
    xstep = "5.00000000000000e+00 m" # Size of volume elements in X direction
    ystep = "5.00000000000000e+00 m" # Size of volume elements in Y direction
    z0_center = "2.00000000000000e+03 m" # Central value of the water vapor distribution
    z0_sigma = "0.00000000000000e+00 m" # Sigma of the water vapor distribution
    zatm = "4.00000000000000e+04 m" # Atmosphere extent for temperature profile
    zmax = "2.00000000000000e+02 m" # Atmosphere extent for water vapor integration
    zstep = "5.00000000000000e+00 m" # Size of volume elements in Z direction

[operators.sim_sss]
    class = "toast.ops.sss.SimScanSynchronousSignal"
    API = 0 # Internal interface version for this operator
    component = 663056 # The simulation component index
    det_data = "signal" # Observation detdata key for accumulating simulated timestreams
    detector_pointing = "None" # Operator that translates boresight Az/El pointing into detector frame
    enabled = false # If True, this class instance is marked as enabled
    fwhm = "1.00000000000000e+01 arcmin" # ground map smoothing scale
    lmax = 256 # ground map expansion order
    name = "sim_sss" # The 'name' of this class instance
    nside = 128 # ground map healpix resolution
    path = "None" # path to a horizontal Healpix map to sample for the SSS *instead* of synthesizing Gaussian maps
    power = -1.0 # exponential for suppressing ground pickup at higher observing elevation
    realization = 0 # The simulation realization index
    scale = "1.00000000000000e+00 mK" # RMS of the ground signal fluctuations at el=45deg

[operators.sim_sso]
    class = "sotodlib.toast.ops.sim_sso.SimSSO"
    API = 0 # Internal interface version for this operator
    beam_file = "None" # Pickle file that stores the simulated beam
    det_data = "signal" # Observation detdata key for simulated signal
    detector_pointing = "None" # Operator that translates boresight Az/El pointing into detector frame
    enabled = false # If True, this class instance is marked as enabled
    name = "sim_sso" # The 'name' of this class instance
    sso_name = "None" # Name of the SSO(s), must be recognized by pyEphem
    times = "times" # Observation shared key for timestamps

[operators.sim_hwpss]
    class = "sotodlib.toast.ops.sim_hwpss.SimHWPSS"
    API = 0 # Internal interface version for this operator
    det_data = "signal" # Observation detdata key for simulated signal
    detector_pointing = "None" # Operator that translates boresight Az/El pointing into detector frame
    enabled = false # If True, this class instance is marked as enabled
    fname_hwpss = "/Users/reijo/Software/macports/lib/python3.8/site-packages/sotodlib/toast/ops/data/hwpss_per_chi.pck" # File containing measured or estimated HWPSS profiles
    hwp_angle = "hwp_angle" # Observation shared key for HWP angle
    name = "sim_hwpss" # The 'name' of this class instance
    stokes_weights = "None" # This must be an instance of a Stokes weights operator

[operators.convolve_time_constant]
    class = "toast.ops.time_constant.TimeConstant"
    API = 0 # Internal interface version for this operator
    deconvolve = false # Deconvolve the time constant instead.
    det_data = "signal" # Observation detdata key apply filtering to
    enabled = false # If True, this class instance is marked as enabled
    name = "convolve_time_constant" # The 'name' of this class instance
    realization = 0 # Realization ID, only used if tau_sigma is nonzero
    tau = "None" # Time constant to apply to all detectors.  Overrides `tau_name`
    tau_name = "None" # Key to use to find time constants in the Focalplane.
    tau_sigma = "None" # Randomized fractional error to add to each time constant.

[operators.gainscrambler]
    class = "toast.ops.gainscrambler.GainScrambler"
    API = 0 # Internal interface version for this operator
    center = 1.0 # Gain distribution center
    component = 0 # Component index for this simulation
    det_data = "signal" # Observation detdata key to apply the gain error to
    enabled = true # If True, this class instance is marked as enabled
    name = "gainscrambler" # The 'name' of this class instance
    pattern = ".*" # Regex pattern to match against detector names. Only detectors that match the pattern are scrambled.
    realization = 0 # Realization index
    sigma = 0.01 # Gain distribution width

[operators.sim_noise]
    class = "toast.ops.sim_tod_noise.SimNoise"
    API = 0 # Internal interface version for this operator
    component = 0 # The noise component index
    det_data = "signal" # Observation detdata key for accumulating noise timestreams
    det_data_units = "None" # Desired output units of the timestream
    enabled = true # If True, this class instance is marked as enabled
    name = "sim_noise" # The 'name' of this class instance
    noise_model = "noise_model" # Observation key containing the noise model
    realization = 0 # The noise realization index
    serial = false # Use legacy serial implementation instead of batched
    times = "times" # Observation shared key for timestamps

[operators.pixels_healpix_radec]
    class = "toast.ops.pixels_healpix.PixelsHealpix"
    API = 0 # Internal interface version for this operator
    create_dist = "None" # Create the submap distribution for all detectors and store in the Data key specified
    detector_pointing = "None" # Operator that translates boresight pointing into detector frame
    enabled = true # If True, this class instance is marked as enabled
    name = "pixels_radec" # The 'name' of this class instance
    nest = true # If True, use NESTED ordering instead of RING
    nside = 64 # The NSIDE resolution
    nside_submap = 8 # The NSIDE of the submap resolution
    pixels = "pixels" # Observation detdata key for output pixel indices
    quats = "None" # Observation detdata key for output quaternions
    single_precision = false # If True, use 32bit int in output
    view = "None" # Use this view of the data in all observations

[operators.weights_radec]
    class = "toast.ops.stokes_weights.StokesWeights"
    API = 0 # Internal interface version for this operator
    cal = "None" # The observation key with a dictionary of pointing weight calibration for each det
    detector_pointing = "None" # Operator that translates boresight pointing into detector frame
    enabled = true # If True, this class instance is marked as enabled
    hwp_angle = "hwp_angle" # Observation shared key for HWP angle
    mode = "IQU" # The Stokes weights to generate (I or IQU)
    name = "weights_radec" # The 'name' of this class instance
    quats = "None" # Observation detdata key for output quaternions
    single_precision = false # If True, use 32bit float in output
    view = "None" # Use this view of the data in all observations
    weights = "weights" # Observation detdata key for output weights

[operators.demodulate]
    class = "toast.ops.demodulation.Demodulate"
    API = 0 # Internal interface version for this operator
    boresight = "boresight_radec" # Observation shared key for boresight
    demod_flag_mask = 1 # Bit mask value for demod & downsample flagging
    det_data = "signal" # Observation detdata key apply filtering to
    det_flag_mask = 1 # Bit mask value for optional detector flagging
    det_flags = "flags" # Observation detdata key for flags to use
    do_2f = false # also cache the 2f-demodulated signal
    enabled = true # If True, this class instance is marked as enabled
    fmax = "None" # Override automatic lowpass cut-off frequency
    hwp_angle = "hwp_angle" # Observation shared key for HWP angle
    name = "demodulate" # The 'name' of this class instance
    noise_model = "noise_model" # Observation key containing the noise model
    nskip = 3 # Downsampling factor
    purge = true # Remove inputs after demodulation
    shared_flag_mask = 1 # Bit mask value for optional shared flagging
    shared_flags = "flags" # Observation shared key for telescope flags to use
    stokes_weights = "None" # This must be an instance of a Stokes weights operator
    times = "times" # Observation shared key for timestamps
    window = "hamming" # Window function name recognized by scipy.signal.firwin
    wkernel = "None" # Override automatic filter kernel size

[operators.noise_estim]
    class = "toast.ops.noise_estimation.NoiseEstim"
    API = 0 # Internal interface version for this operator
    det_data = "signal" # Observation detdata key apply filtering to
    det_flag_mask = 1 # Bit mask value for optional detector flagging
    det_flags = "flags" # Observation detdata key for flags to use
    detector_pointing = "None" # Operator that translates boresight pointing into detector frame.  Only relevant if `maskfile` and/or `mapfile` are set
    enabled = false # If True, this class instance is marked as enabled
    lagmax = 10000 # Maximum lag to consider for the covariance function
    mapfile = "None" # Optional HEALPix map to sample and subtract from the signal
    mask_flag_mask = 1 # Bit mask for raising processing mask flags
    mask_flags = "flags" # Observation detdata key for processing mask flags
    maskfile = "None" # Optional HEALPix processing mask
    name = "noise_estim" # The 'name' of this class instance
    naverage = 100 # Smoothing kernel width for downsampled data
    nbin_psd = 1000 # Bin the resulting PSD
    nocross = false # Do not evaluate cross-PSDs.  Overridden by `pairs`
    nosingle = false # Do not evaluate individual PSDs.  Overridden by `pairs`
    nsum = 1 # Downsampling factor for decimated data
    output_dir = "." # If specified, write output data products to this directory
    pairs = "None" # Detector pairs to estimate noise for.  Overrides `nosingle` and `nocross`
    pixel_dist = "pixel_dist" # The Data key where the PixelDistribution object is located.  Only relevant if `maskfile` and/or `mapfile` are set
    pixel_pointing = "None" # An instance of a pixel pointing operator.  Only relevant if `maskfile` and/or `mapfile` are set
    pol = true # Sample also the polarized part of the map
    save_cov = false # Save also the sample covariance
    shared_flag_mask = 1 # Bit mask value for optional shared flagging
    shared_flags = "flags" # Observation shared key for telescope flags to use
    stationary_period = "8.64000000000000e+04 s" # Break the observation into several estimation periods of this length
    stokes_weights = "None" # An instance of a Stokes weights operator.  Only relevant if `mapfile` is set
    times = "times" # Observation shared key for timestamps
    view = "None" # Only measure the covariance within each view

[operators.flag_sso]
    class = "toast.ops.flag_sso.FlagSSO"
    API = 0 # Internal interface version for this operator
    det_flag_mask = 3 # Bit mask to raise flags with
    det_flags = "flags" # Observation detdata key for flags to use
    detector_pointing = "None" # Operator that translates boresight Az/El pointing into detector frame
    enabled = false # If True, this class instance is marked as enabled
    name = "flag_sso" # The 'name' of this class instance
    sso_names = [] # Names of the SSOs, must be recognized by pyEphem
    sso_radii = [] # Radii around the sources to flag
    times = "times" # Observation shared key for timestamps
    view = "None" # Use this view of the data in all observations

[operators.h_n]
    class = "sotodlib.toast.ops.h_n.Hn"
    API = 0 # Internal interface version for this operator
    det_flag_mask = 1 # Bit mask value for optional detector flagging
    det_flags = "flags" # Observation detdata key for flags to use
    enabled = false # If True, this class instance is marked as enabled
    hwp_angle = "hwp_angle" # Observation shared key for HWP angle
    name = "h_n" # The 'name' of this class instance
    nmax = 4 # Maximum `n` to evaluate.
    nmin = 1 # Minimum `n` to evaluate.
    noise_model = "noise_model" # Observation key containing the noise model
    output_dir = "." # Write output data products to this directory
    pixel_dist = "pixel_dist" # The Data key where the PixelDist object should be stored
    pixel_pointing = "None" # This must be an instance of a pixel pointing operator
    rcond_threshold = 1e-08 # Minimum value for inverse condition number cut.
    save_pointing = false # If True, do not clear detector pointing matrices after use
    shared_flag_mask = 1 # Bit mask value for optional telescope flagging
    shared_flags = "flags" # Observation shared key for telescope flags to use
    sync_type = "alltoallv" # Communication algorithm: 'allreduce' or 'alltoallv'

[operators.cadence_map]
    class = "toast.ops.cadence_map.CadenceMap"
    det_flag_mask = 1 # Bit mask value for optional detector flagging
    det_flags = "flags" # Observation detdata key for flags to use
    enabled = false # If True, this class instance is marked as enabled
    name = "cadence_map" # The 'name' of this class instance
    output_dir = "." # Write output data products to this directory
    pixel_dist = "None" # The Data key containing the submap distribution
    pixel_pointing = "None" # This must be an instance of a pixel pointing operator.
    save_pointing = false # If True, do not clear pixel numbers after use
    shared_flag_mask = 1 # Bit mask value for optional telescope flagging
    shared_flags = "flags" # Observation shared key for telescope flags to use
    times = "times" # Observation shared key for timestamps

[operators.crosslinking]
    class = "toast.ops.crosslinking.CrossLinking"
    API = 0 # Internal interface version for this operator
    det_flag_mask = 1 # Bit mask value for optional detector flagging
    det_flags = "flags" # Observation detdata key for flags to use
    enabled = false # If True, this class instance is marked as enabled
    name = "crosslinking" # The 'name' of this class instance
    output_dir = "." # Write output data products to this directory
    pixel_dist = "pixel_dist" # The Data key where the PixelDist object should be stored
    pixel_pointing = "None" # This must be an instance of a pixel pointing operator.
    save_pointing = false # If True, do not clear pixel numbers after use
    shared_flag_mask = 1 # Bit mask value for optional telescope flagging
    shared_flags = "flags" # Observation shared key for telescope flags to use
    sync_type = "alltoallv" # Communication algorithm: 'allreduce' or 'alltoallv'

[operators.raw_statistics]
    class = "toast.ops.statistics.Statistics"
    API = 0 # Internal interface version for this operator
    det_data = "signal" # Observation detdata key to analyze
    det_flag_mask = 1 # Bit mask value for optional detector flagging
    det_flags = "flags" # Observation detdata key for flags to use
    enabled = false # If True, this class instance is marked as enabled
    name = "raw_statistics" # The 'name' of this class instance
    output_dir = "None" # If specified, write output data products to this directory
    shared_flag_mask = 1 # Bit mask value for optional shared flagging
    shared_flags = "flags" # Observation shared key for telescope flags to use
    view = "None" # Use this view of the data in all observations

[operators.deconvolve_time_constant]
    class = "toast.ops.time_constant.TimeConstant"
    API = 0 # Internal interface version for this operator
    deconvolve = true # Deconvolve the time constant instead.
    det_data = "signal" # Observation detdata key apply filtering to
    enabled = false # If True, this class instance is marked as enabled
    name = "deconvolve_time_constant" # The 'name' of this class instance
    realization = 0 # Realization ID, only used if tau_sigma is nonzero
    tau = "None" # Time constant to apply to all detectors.  Overrides `tau_name`
    tau_name = "None" # Key to use to find time constants in the Focalplane.
    tau_sigma = "None" # Randomized fractional error to add to each time constant.

[operators.groundfilter]
    class = "toast.ops.groundfilter.GroundFilter"
    API = 0 # Internal interface version for this operator
    azimuth = "azimuth" # Observation shared key for Azimuth
    boresight_azel = "boresight_azel" # Observation shared key for boresight Az/El
    det_data = "signal" # Observation detdata key for accumulating atmosphere timestreams
    det_flag_mask = 1 # Bit mask value for optional detector flagging
    det_flags = "flags" # Observation detdata key for flags to use
    detrend = false # Subtract the fitted trend along with the ground template
    enabled = false # If True, this class instance is marked as enabled
    filter_order = 5 # Order of a Legendre polynomial to fit as a function of azimuth.
    ground_flag_mask = 1 # Bit mask to use when adding flags based on ground filter failures.
    leftright_mask = 8 # Bit mask value for left-to-right scans
    name = "groundfilter" # The 'name' of this class instance
    rightleft_mask = 16 # Bit mask value for right-to-left scans
    shared_flag_mask = 1 # Bit mask value for optional shared flagging
    shared_flags = "flags" # Observation shared key for telescope flags to use
    split_template = false # Apply a different template for left and right scans
    trend_order = 5 # Order of a Legendre polynomial to fit along with the ground template.
    view = "None" # Use this view of the data in all observations

[operators.polyfilter1D]
    class = "toast.ops.polyfilter.PolyFilter"
    API = 0 # Internal interface version for this operator
    det_data = "signal" # Observation detdata key apply filtering to
    det_flag_mask = 1 # Bit mask value for optional detector flagging
    det_flags = "flags" # Observation detdata key for flags to use
    enabled = false # If True, this class instance is marked as enabled
    name = "polyfilter1D" # The 'name' of this class instance
    order = 1 # Polynomial order
    pattern = ".*" # Regex pattern to match against detector names. Only detectors that match the pattern are filtered.
    poly_flag_mask = 1 # Shared flag bit mask for samples that are not filtered
    shared_flag_mask = 1 # Bit mask value for optional shared flagging
    shared_flags = "flags" # Observation shared key for telescope flags to use
    view = "throw" # Use this view of the data in all observations

[operators.polyfilter2D]
    class = "toast.ops.polyfilter.PolyFilter2D"
    API = 0 # Internal interface version for this operator
    det_data = "signal" # Observation detdata key apply filtering to
    det_flag_mask = 1 # Bit mask value for optional detector flagging
    det_flags = "flags" # Observation detdata key for flags to use
    enabled = false # If True, this class instance is marked as enabled
    focalplane_key = "None" # Which focalplane key to match
    name = "polyfilter2D" # The 'name' of this class instance
    order = 1 # Polynomial order
    pattern = ".*" # Regex pattern to match against detector names. Only detectors that match the pattern are filtered.
    poly_flag_mask = 1 # Bit mask value for intervals that fail to filter
    shared_flag_mask = 1 # Bit mask value for optional shared flagging
    shared_flags = "flags" # Observation shared key for telescope flags to use
    times = "times" # Observation shared key for timestamps
    use_python = false # If True, use a pure python implementation for testing.
    view = "None" # Use this view of the data in all observations

[operators.common_mode_filter]
    class = "toast.ops.polyfilter.CommonModeFilter"
    API = 0 # Internal interface version for this operator
    det_data = "signal" # Observation detdata key apply filtering to
    det_flag_mask = 1 # Bit mask value for optional detector flagging
    det_flags = "flags" # Observation detdata key for flags to use
    enabled = false # If True, this class instance is marked as enabled
    focalplane_key = "None" # Which focalplane key to match
    name = "common_mode_filter" # The 'name' of this class instance
    pattern = ".*" # Regex pattern to match against detector names. Only detectors that match the pattern are filtered.
    redistribute = false # If True, redistribute data before and after filtering for optimal data locality.
    shared_flag_mask = 1 # Bit mask value for optional shared flagging
    shared_flags = "flags" # Observation shared key for telescope flags to use
    times = "times" # Observation shared key for timestamps

[operators.filtered_statistics]
    class = "toast.ops.statistics.Statistics"
    API = 0 # Internal interface version for this operator
    det_data = "signal" # Observation detdata key to analyze
    det_flag_mask = 1 # Bit mask value for optional detector flagging
    det_flags = "flags" # Observation detdata key for flags to use
    enabled = false # If True, this class instance is marked as enabled
    name = "filtered_statistics" # The 'name' of this class instance
    output_dir = "None" # If specified, write output data products to this directory
    shared_flag_mask = 1 # Bit mask value for optional shared flagging
    shared_flags = "flags" # Observation shared key for telescope flags to use
    view = "None" # Use this view of the data in all observations

[operators.binner]
    class = "toast.ops.mapmaker_binning.BinMap"
    API = 0 # Internal interface version for this operator
    binned = "binned" # The Data key where the binned map should be stored
    covariance = "covariance" # The Data key containing the noise covariance PixelData instance
    det_data = "signal" # Observation detdata key for the timestream data
    det_flag_mask = 1 # Bit mask value for optional detector flagging
    det_flags = "flags" # Observation detdata key for flags to use
    enabled = true # If True, this class instance is marked as enabled
    full_pointing = false # If True, expand pointing for all detectors and save
    name = "binner" # The 'name' of this class instance
    noise_model = "noise_model" # Observation key containing the noise model
    noiseweighted = "None" # The Data key where the noiseweighted map should be stored
    pixel_dist = "pix_dist" # The Data key where the PixelDist object should be stored
    pixel_pointing = "None" # This must be an instance of a pixel pointing operator
    pre_process = "None" # Optional extra operator to run prior to binning
    shared_flag_mask = 1 # Bit mask value for optional telescope flagging
    shared_flags = "flags" # Observation shared key for telescope flags to use
    stokes_weights = "None" # This must be an instance of a Stokes weights operator
    sync_type = "alltoallv" # Communication algorithm: 'allreduce' or 'alltoallv'

[operators.mapmaker]
    class = "toast.ops.mapmaker.MapMaker"
    API = 0 # Internal interface version for this operator
    binning = "None" # Binning operator used for solving template amplitudes
    convergence = 1e-12 # Relative convergence limit
    det_data = "signal" # Observation detdata key for the timestream data
    enabled = false # If True, this class instance is marked as enabled
    iter_max = 100 # Maximum number of iterations
    keep_final_products = false # If True, keep the map domain products in data after write
    keep_solver_products = false # If True, keep the map domain solver products in data
    map_binning = "None" # Binning operator for final map making.  Default is same as solver
    map_rcond_threshold = 1e-08 # For final map, minimum value for inverse pixel condition number cut.
    mask = "None" # Data key for pixel mask to use in solving.  First bit of pixel values is tested
    mc_index = "None" # The Monte-Carlo index
    mc_mode = false # If True, re-use solver flags, sparse covariances, etc
    name = "mapmaker" # The 'name' of this class instance
    output_dir = "." # Write output data products to this directory
    overwrite_cleaned = false # If True and save_cleaned is True, overwrite the input data
    report_memory = false # Report memory throughout the execution
    reset_pix_dist = false # Clear any existing pixel distribution.  Useful when applyingrepeatedly to different data objects.
    save_cleaned = false # If True, save the template-subtracted detector timestreams
    solve_rcond_threshold = 1e-08 # When solving, minimum value for inverse pixel condition number cut.
    template_matrix = "None" # This must be an instance of a template matrix operator
    write_cov = false # If True, write the white noise covariance matrices.
    write_hdf5 = false # If True, outputs are in HDF5 rather than FITS format.
    write_hits = false # If True, write the hits map
    write_invcov = false # If True, write the inverse white noise covariance matrices.
    write_map = false # If True, write the projected map
    write_noiseweighted_map = false # If True, write the noise-weighted map
    write_rcond = false # If True, write the reciprocal condition numbers.

[operators.pixels_healpix_radec_final]
    class = "toast.ops.pixels_healpix.PixelsHealpix"
    API = 0 # Internal interface version for this operator
    create_dist = "None" # Create the submap distribution for all detectors and store in the Data key specified
    detector_pointing = "None" # Operator that translates boresight pointing into detector frame
    enabled = false # If True, this class instance is marked as enabled
    name = "pixels_radec_final" # The 'name' of this class instance
    nest = true # If True, use NESTED ordering instead of RING
    nside = 64 # The NSIDE resolution
    nside_submap = 8 # The NSIDE of the submap resolution
    pixels = "pixels" # Observation detdata key for output pixel indices
    quats = "None" # Observation detdata key for output quaternions
    single_precision = false # If True, use 32bit int in output
    view = "None" # Use this view of the data in all observations

[operators.binner_final]
    class = "toast.ops.mapmaker_binning.BinMap"
    API = 0 # Internal interface version for this operator
    binned = "binned" # The Data key where the binned map should be stored
    covariance = "covariance" # The Data key containing the noise covariance PixelData instance
    det_data = "signal" # Observation detdata key for the timestream data
    det_flag_mask = 1 # Bit mask value for optional detector flagging
    det_flags = "flags" # Observation detdata key for flags to use
    enabled = false # If True, this class instance is marked as enabled
    full_pointing = false # If True, expand pointing for all detectors and save
    name = "binner_final" # The 'name' of this class instance
    noise_model = "noise_model" # Observation key containing the noise model
    noiseweighted = "None" # The Data key where the noiseweighted map should be stored
    pixel_dist = "pix_dist_final" # The Data key where the PixelDist object should be stored
    pixel_pointing = "None" # This must be an instance of a pixel pointing operator
    pre_process = "None" # Optional extra operator to run prior to binning
    shared_flag_mask = 1 # Bit mask value for optional telescope flagging
    shared_flags = "flags" # Observation shared key for telescope flags to use
    stokes_weights = "None" # This must be an instance of a Stokes weights operator
    sync_type = "alltoallv" # Communication algorithm: 'allreduce' or 'alltoallv'

[operators.filterbin]
    class = "toast.ops.filterbin.FilterBin"
    API = 0 # Internal interface version for this operator
    azimuth = "azimuth" # Observation shared key for Azimuth
    binning = "None" # Binning operator for map making.
    cache_dir = "dummy_cache" # Cache directory for additive observation matrix products
    deproject_map = "None" # Healpix map containing the deprojection templates: intensity map and its derivatives
    deproject_nnz = 1 # Number of deprojection templates to regress.  Must be less than or equal to number of columns in `deproject_map`.
    deproject_pattern = ".*" # Regular expression to test detector names with.  Only matching detectors will be deprojected.  Used to identify differenced TOD.
    det_data = "signal" # Observation detdata key for the timestream data
    det_flag_mask = 1 # Bit mask value for optional detector flagging
    det_flags = "flags" # Observation detdata key for flags to use
    enabled = true # If True, this class instance is marked as enabled
    filter_flag_mask = 1 # Bit mask value for flagging samples that fail filtering
    ground_filter_order = 5 # Order of a Legendre polynomial to fit as a function of azimuth.
    leftright_mask = 8 # Bit mask value for left-to-right scans
    maskfile = "None" # Optional processing mask
    name = "filterbin" # The 'name' of this class instance
    output_dir = "." # Write output data products to this directory
    poly_filter_order = 2 # Polynomial order
    poly_filter_view = "throw" # Intervals for polynomial filtering
    rcond_threshold = 0.001 # Minimum value for inverse pixel condition number cut.
    report_memory = false # Report memory throughout the execution
    reset_pix_dist = false # Clear any existing pixel distribution.  Useful when applyingrepeatedly to different data objects.
    rightleft_mask = 16 # Bit mask value for right-to-left scans
    shared_flag_mask = 1 # Bit mask value for optional telescope flagging
    shared_flags = "flags" # Observation shared key for telescope flags to use
    split_ground_template = false # Apply a different template for left and right scans
    write_cov = false # If True, write the white noise covariance matrices.
    write_hdf5 = false # If True, output maps are in HDF5 rather than FITS format.
    write_hits = false # If True, write the hits map
    write_invcov = false # If True, write the inverse white noise covariance matrices.
    write_map = true # If True, write the projected map
    write_noiseweighted_map = false # If True, write the noise-weighted map
    write_obs_matrix = false # Write the observation matrix
    write_rcond = false # If True, write the reciprocal condition numbers.

[operators.mlmapmaker]
    class = "sotodlib.toast.ops.mlmapmaker.MLMapmaker"
    API = 0 # Internal interface version for this operator
    Nmat = "None" # The noise matrix to use
    area = "area_file_00.5.fits" # Load the enmap geometry from this file
    boresight = "boresight_azel" # Observation shared key for boresight Az/El
    center_at = "None" # The format is [from=](ra:dec|name),[to=(ra:dec|name)],[up=(ra:dec|name|system)]
    comps = "TQU" # Components (must be 'T', 'QU' or 'TQU')
    det_data = "signal" # Observation detdata key for the timestream data
    det_flag_mask = 1 # Bit mask value for optional detector flagging
    det_flags = "None" # Observation detdata key for flags to use
    dtype_map = "float64" # Numpy dtype of map products
    enabled = false # If True, this class instance is marked as enabled
    maxerr = 1e-06 # Maximum error in the CG solver
    maxiter = 100 # Maximum number of CG iterations
    name = "mlmapmaker" # The 'name' of this class instance
    nmat_dir = "nmats" # Where to read/write/cache noise matrices. See nmat_mode. If {out_dir} is in the string, then it will be expanded to the value of the out_dir parameter
    nmat_mode = "load" # How to initialize the noise matrix.  'build': Always build from data in obs.  'cache': Use if available in nmat_dir, otherwise build and save.  'load': Load from nmat_dir, error if missing.  'save': Build from obs data and save.
    nmat_type = "NmatDetvecs" # Noise matrix type is either `NmatDetvecs` or `NmatUncorr`
    noise_model = "noise_model" # Observation key containing the noise model
    out_dir = "." # The output directory
    purge_det_data = false # If True, clear all observation detector data after accumulating
    shared_flag_mask = 1 # Bit mask value for optional shared flagging
    shared_flags = "None" # Observation shared key for telescope flags to use
    site = "so" # Site to use when making maps
    tiled = true # If True, the map will be represented as distributed tiles in memory. For large maps this is faster and more memory efficient, but for small maps it has some overhead due to extra communication.
    times = "times" # Observation shared key for timestamps
    truncate_tod = true
    verbose = 1 # Set verbosity in MLMapmaker.  If None, use toast loglevel
    view = "None" # Use this view of the data in all observations
    weather = "vacuum" # Weather to assume when making maps
    write_bin = false # Write out the binned map
    write_div = false # Write out the noise weight map
    write_iter_map = 10 # Number of iterations between saved maps.  Set to zero to disable.
    write_rhs = false # Write out the right hand side of the mapmaking equation

[operators.mem_count]
    class = "toast.ops.memory_counter.MemoryCounter"
    API = 0 # Internal interface version for this operator
    enabled = true # If True, this class instance is marked as enabled
    name = "mem_count" # The 'name' of this class instance
    prefix = "" # Prefix for log messages
    silent = false # If True, return the memory used but do not log the result

[operators.madam]
    class = "toast.ops.madam.Madam"
    API = 0 # Internal interface version for this operator
    copy_groups = 1 # The processes on each node are split into this number of groups to copy data in turns
    det_data = "signal" # Observation detdata key for the timestream data
    det_flag_mask = 1 # Bit mask value for optional detector flagging
    det_flags = "flags" # Observation detdata key for flags to use
    det_out = "None" # Observation detdata key for output destriped timestreams
    enabled = false # If True, this class instance is marked as enabled
    mcmode = false # If true, Madam will store auxiliary information such as pixel matrices and noise filter.
    mem_report = false # Print system memory use while staging / unstaging data.
    name = "madam" # The 'name' of this class instance
    noise_model = "noise_model" # Observation key containing the noise model
    noise_scale = "noise_scale" # Observation key with optional scaling factor for noise PSDs
    paramfile = "None" # Read madam parameters from this file
    pixel_pointing = "None" # This must be an instance of a pixel pointing operator
    purge_det_data = false # If True, clear all observation detector data after copying to madam buffers
    restore_det_data = false # If True, restore detector data to observations on completion
    shared_flag_mask = 1 # Bit mask value for optional shared flagging
    shared_flags = "flags" # Observation shared key for telescope flags to use
    stokes_weights = "None" # This must be an instance of a Stokes weights operator
    times = "times" # Observation shared key for timestamps
    translate_timestamps = false # Translate timestamps to enforce monotonity.
    view = "None" # Use this view of the data in all observations

    [operators.madam.params] # Parameters to pass to madam

[templates]
[templates.baselines]
    class = "toast.templates.offset.Offset"
    data = "None" # This must be an instance of a Data class (or None)
    det_data = "signal" # Observation detdata key for the timestream data
    det_flag_mask = 1 # Bit mask value for solver flags
    det_flags = "flags" # Observation detdata key for solver flags to use
    enabled = false # If True, this class instance is marked as enabled
    good_fraction = 0.5 # Fraction of unflagged samples needed to keep a given offset amplitude
    name = "baselines" # The 'name' of this class instance
    noise_model = "None" # Observation key containing the optional noise model
    precond_width = 20 # Preconditioner width in terms of offsets / baselines
    step_time = "1.00000000000000e+04 s" # Time per baseline step
    times = "times" # Observation shared key for timestamps
    use_noise_prior = false # Use detector PSDs to build the noise prior and preconditioner
    view = "None" # Use this view of the data in all observations
